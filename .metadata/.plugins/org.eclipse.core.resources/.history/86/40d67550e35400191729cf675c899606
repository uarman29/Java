package application;

import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.ListView;
import javafx.scene.control.ListCell;
import javafx.util.Callback;
import javafx.event.ActionEvent;
import java.util.Comparator;

public class ContactsController 
{

    @FXML private TextField firstNameDisplayTextField;
    @FXML private TextField lastNameDisplayTextField;
    @FXML private TextField emailDisplayTextField;
    @FXML private TextField phoneDisplayTextField;
    
    @FXML private TextField firstNameTextField;
    @FXML private TextField lastNameTextField;
    @FXML private TextField phoneTextField;
    @FXML private TextField emailTextField;
    
    @FXML private GridPane displayPane;
    @FXML private Button addButton;
    @FXML private Button removeButton;
    @FXML private Button updateButton;
    
    @FXML private ListView<Contact> contactsListView;
    
    private ObservableList<Contact> contacts = FXCollections.observableArrayList();
    
    public void initialize()
    {
    	contacts.add(new Contact("John","Smith","johnsmith29@email.com","123456789"));
    	contacts.add(new Contact("Mary","Smith","marysmith10@email.com","123123123"));
    	contacts.add(new Contact("Jack","Daniels","jd420@email.com","646646646"));
    	contacts.add(new Contact("Winne","the Pooh","honeyMan@email.com","555555555"));
    	contactsListView.setItems(contacts);
    	
    	sort();
    	displayPane.setOpacity(0);
    	
    	contactsListView.getSelectionModel().selectedItemProperty().addListener
    	(
    		new ChangeListener<Contact>()
    		{
    			@Override
    			public void changed(ObservableValue<? extends Contact> ov, Contact oldValue, Contact newValue)
    			{
    				if(!contacts.isEmpty())
    				{
	    				firstNameDisplayTextField.setText(newValue.getFirstName());
	    				lastNameDisplayTextField.setText(newValue.getLastName());
	    				emailDisplayTextField.setText(newValue.getEmail());
	    				phoneDisplayTextField.setText(newValue.getPhoneNumber());
	    				displayPane.setOpacity(1);
    				}
    			}
    		}
    	);
    }
    
    public void addContact(ActionEvent e)
    {
    	if(firstNameTextField.getText().isEmpty())
    	{
    		firstNameTextField.requestFocus();
    		return;
    	}
    	
    	if(lastNameTextField.getText().isEmpty())
    	{
    		lastNameTextField.requestFocus();
    		return;
    	}
    	
    	contacts.add(new Contact(firstNameTextField.getText(),lastNameTextField.getText(),
    							 emailTextField.getText(),phoneTextField.getText()));
    	
    	
    	contactsListView.refresh();
    }
    
    public void updateContact(ActionEvent e)
    {
    	if(firstNameDisplayTextField.getText().isEmpty())
    	{
    		firstNameDisplayTextField.requestFocus();
    		return;
    	}
    	
    	if(lastNameDisplayTextField.getText().isEmpty())
    	{
    		lastNameDisplayTextField.requestFocus();
    		return;
    	}
    	
    	int index = contactsListView.getSelectionModel().getSelectedIndex();
    	contacts.get(index).setFirstName(firstNameDisplayTextField.getText());
    	contacts.get(index).setLastName(lastNameDisplayTextField.getText());
    	contacts.get(index).setEmail(emailDisplayTextField.getText());
    	contacts.get(index).setPhoneNumber(phoneDisplayTextField.getText());
    	
    	sort();
    	contactsListView.refresh();
    }
    
    public void removeContact(ActionEvent e)
    {
    	if(contacts.isEmpty())
    		return;
    	
    	int index = contactsListView.getSelectionModel().getSelectedIndex();
    	if(index < 0)
    		return;
    	
    	contacts.remove(index);
    	contactsListView.refresh();
    	if(contacts.isEmpty())
    		displayPane.setOpacity(0);
    }
    
    private void sort()
    {
    	int i, j, min_idx; 
    	  
        // One by one move boundary of unsorted subarray 
        for (i = 0; i < contacts.size()-1; i++) 
        { 
            // Find the minimum element in unsorted array 
            min_idx = i; 
            for (j = i+1; j < contacts.size(); j++) 
              if (contacts.get(j).getLastName().compareTo(contacts.get(min_idx).getLastName())<0) 
                min_idx = j; 
      
            // Swap the found minimum element with the first element 
            Contact tmp = contacts.get(i);
            contacts.set(i, contacts.get(min_idx));
            contacts.set(min_idx,tmp);
        } 
    }
}
